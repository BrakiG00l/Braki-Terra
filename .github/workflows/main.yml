name: Terraform Deploy

on:
  pull_request: # Cambia a pull_request para que se ejecute en PRs
    branches:
      - main

env:
  AWS_ROLE_ARN: arn:aws:iam::677276094967:role/git-role # Reemplaza con el ARN de tu rol
  AWS_REGION: us-east-1 # Reemplaza con tu región

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: Produccion # Agrega esta linea
    permissions:
      id-token: write
      contents: read
      pull-requests: write # Agrega este permiso

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
      - name: Terraform Init
        run: terraform init
      - name: Terraform fmt
        run: terraform fmt
      - name: Terraform validate
        run: terraform validate
      - name: Terraform plan
        id: plan
        run: terraform plan
        continue-on-error: true # Permite que el flujo de trabajo continúe incluso si terraform plan falla
      - name: Comment Terraform Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan \`\`\`\n${process.env.PLAN}\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      - name: Terraform Apply
        run: terraform apply
        if: github.ref == 'refs/heads/main'
